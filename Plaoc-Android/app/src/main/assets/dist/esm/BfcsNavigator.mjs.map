{"version":3,"file":"BfcsNavigator.mjs","sources":["../../BfcsNavigator.ts"],"sourcesContent":["import { EvtOut } from \"./EvtOut\";\r\n\r\nexport class BfcsNavigator<R extends Route = Route> {\r\n  constructor(\r\n    /**当前导航器的信息 */\r\n    readonly info: BfcsNavigator.NavigatorInfo,\r\n    /**父级导航器的公开信息 */\r\n    readonly parentInfo: BfcsNavigator.NavigatorInfo | undefined,\r\n    /**\r\n     * Foreign Function Interface\r\n     */\r\n    private _ffi: BfcsNavigator.FFI\r\n  ) {}\r\n\r\n  #routes: R[] = [];\r\n  /**\r\n   * 当前存有的 route 个数\r\n   */\r\n  get length() {\r\n    return this.#routes.length;\r\n  }\r\n  /**\r\n   * 根据下标读取路由\r\n   */\r\n  at(index: number): R | undefined {\r\n    return this.#routes[index < 0 ? this.#routes.length + index : index];\r\n  }\r\n\r\n  /**\r\n   * 不能连续 push 重复的 route\r\n   * @param route\r\n   */\r\n  push(route: R): boolean {\r\n    const success = this._ffi.push(this.info.nid, route);\r\n    if (success) {\r\n      this.#routes.push(route);\r\n      this.#onPushEvt.emit({ route });\r\n    }\r\n    return success;\r\n  }\r\n  #onPushEvt = new EvtOut<{ route: R }>();\r\n  get onPush() {\r\n    return this.#onPushEvt.toAsyncGenerator();\r\n  }\r\n  /**\r\n   * 返回真正 pop 出来的数量\r\n   * @param count\r\n   */\r\n  pop(count: number = 1): number {\r\n    const result = this._ffi.pop(this.info.nid, count);\r\n    if (result > 0) {\r\n      for (const route of this.#routes.splice(-result)) {\r\n        this.#onPopEvt.emit({ route });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  #onPopEvt = new EvtOut<{ route: R }>();\r\n  get onPop() {\r\n    return this.#onPopEvt.toAsyncGenerator();\r\n  }\r\n  /**\r\n   * 替代当前的路由栈中最后一个\r\n   * 不能连续 replace 重复的 route\r\n   * @param route\r\n   */\r\n  replace(route: R, at = -1): boolean {\r\n    const index = at < 0 ? this.#routes.length + at : at;\r\n    if (index in this.#routes === false) {\r\n      return false;\r\n    }\r\n    const success = this._ffi.replace(this.info.nid, index, route);\r\n    if (success) {\r\n      const removedRoutes = this.#routes.splice(at, 1, route);\r\n      this.#onReplaceEvt.emit({ newRoute: route, oldRoute: removedRoutes[0] });\r\n    }\r\n    return success;\r\n  }\r\n  #onReplaceEvt = new EvtOut<{ newRoute: R; oldRoute: R }>();\r\n  get onReplace() {\r\n    return this.#onReplaceEvt.toAsyncGenerator();\r\n  }\r\n  //   /**\r\n  //    * 阻止默认返回行为，会提供“连续进行返回操作的次数”信息，使用场景如下：\r\n  //    * 1. 重要弹窗需要用户明确点击按钮做出反应，那么可以默认阻止弹窗关闭，如果用户连续进行两次返回操作，就触发默认按钮的点击结果\r\n  //    * 2. actionSheet（在桌面端下就是右键菜单）的关闭\r\n  //    * 3. 简单窗口的关闭或隐藏\r\n  //    * 4. 根应用（桌面应用）不能再返回\r\n  //    */\r\n  //   protected abstract _guard(reason: PromiseLike<unknown>, times?: number);\r\n  //   readonly onGuard: Evt<{ times: number; reason: PromiseLike<unknown> }>;\r\n\r\n  #ownNavs = new WeakSet<BfcsNavigator>();\r\n  /**\r\n   * 创新一个新的导航器\r\n   * @param opts\r\n   */\r\n  fork(opts: BfcsNavigator.ForkOptions): BfcsNavigator | undefined {\r\n    const parentNav =\r\n      opts.fromNavigator === null ? null : opts.fromNavigator || this;\r\n    const parentNid = parentNav?.info.nid ?? -1;\r\n    const result = this._ffi.fork(this.info.nid, opts.data, parentNid);\r\n    if (result >= 0) {\r\n      const newNavigator = new BfcsNavigator(\r\n        Object.freeze({ data: opts.data, nid: result }),\r\n        parentNav?.info,\r\n        this._ffi\r\n      );\r\n      this.#ownNavs.add(newNavigator);\r\n      this.#onForkEvt.emit({\r\n        newNavigator: newNavigator,\r\n        fromNavigator: parentNav,\r\n      });\r\n      return newNavigator;\r\n    }\r\n  }\r\n  #onForkEvt = new EvtOut<{\r\n    newNavigator: BfcsNavigator;\r\n    fromNavigator: BfcsNavigator | null;\r\n  }>();\r\n  get onFork() {\r\n    return this.#onForkEvt.toAsyncGenerator();\r\n  }\r\n\r\n  /**\r\n   * 切换导航器，切换出来后，当前 navigator 就不能再操作\r\n   * 只能切换自己 fork 出来的子路由 或者 自身\r\n   *\r\n   * 如果无权切换，那么会返回 false\r\n   */\r\n  checkout(navigator: BfcsNavigator): boolean {\r\n    if (this.#ownNavs.has(navigator) === false) {\r\n      return false;\r\n    }\r\n    return this._ffi.checkout(this.info.nid, navigator.info.nid);\r\n    // if (success) {\r\n    //   this.#onCheckoutEvt.emit({\r\n    //     fromNavigator: this, // 应该使用当前正在激活的 nav\r\n    //     toNavigator: navigator,\r\n    //   });\r\n    // }\r\n    // return success;\r\n  }\r\n  #onActivicedEvt = new EvtOut<{\r\n    fromNavigator: BfcsNavigator;\r\n    toNavigator: BfcsNavigator;\r\n  }>();\r\n  get onActiviced() {\r\n    return this.#onActivicedEvt.toAsyncGenerator();\r\n  }\r\n\r\n  /**\r\n   * 销毁导航器\r\n   * 只能销毁自己 fork 出来的子路由 或者 自身\r\n   *\r\n   * 如果无权切换，那么会返回 false\r\n   * @param navigator\r\n   */\r\n  destroy(navigator: BfcsNavigator, reason?: unknown): boolean {\r\n    if (this.#ownNavs.has(navigator) === false) {\r\n      return false;\r\n    }\r\n    const success = this._ffi.destroy(this.info.nid, navigator.info.nid);\r\n    if (success) {\r\n      this.#ownNavs.delete(navigator);\r\n      navigator.#onDestroyEvt.emit({ reason });\r\n    }\r\n    return success;\r\n  }\r\n  #onDestroyEvt = new EvtOut<{\r\n    reason?: unknown;\r\n  }>();\r\n\r\n  get onDestroy() {\r\n    return this.#onDestroyEvt.toAsyncGenerator();\r\n  }\r\n}\r\ntype Cloneable = string | number | { [key: string]: Cloneable };\r\n\r\ntype Route = Cloneable;\r\n\r\nexport namespace BfcsNavigator {\r\n  export type FFI = {\r\n    init(): string;\r\n    push(nid: number, route: Route): boolean;\r\n    pop(nid: number, count: number): number;\r\n    replace(nid: number, at: number, newRoute: Route): boolean;\r\n    fork(nid: number, data: Cloneable, parentNavigatorId: number): number;\r\n    checkout(nid: number, toNid: number): boolean;\r\n    destroy(nid: number, targetNid: number): boolean;\r\n    onActivited: EvtOut<{ fromNid: number; toNid: number }>;\r\n    onUnActivited: EvtOut<{ fromNid: number; toNid: number }>;\r\n  };\r\n  export type NavigatorInfo = Readonly<{\r\n    nid: number;\r\n    //   maxGuardTimes: number;\r\n    data: Cloneable;\r\n  }>;\r\n  export type ForkOptions = {\r\n    data: Cloneable;\r\n    // /**\r\n    //  * 意味着新导航器能拦截的连续点击返回的最大次数，只能设置不多于当前导航器的拦截数。\r\n    //  * 默认与当前导航器的最大拦截数一致。\r\n    //  */\r\n    // maxGuardTimes?: number;\r\n    /**\r\n     * 能为其声明来源。默认会提供当前 nav 对象。\r\n     * 如果设置成 null ，那么就是脱离父级存在。\r\n     */\r\n    fromNavigator?: BfcsNavigator | null;\r\n  };\r\n}\r\n"],"names":[],"mappings":"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"}