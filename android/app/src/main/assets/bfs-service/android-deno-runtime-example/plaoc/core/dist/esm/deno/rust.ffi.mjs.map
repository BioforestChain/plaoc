{"version":3,"file":"rust.ffi.mjs","sources":["../../../../../../../../../../../android-deno-runtime-example/plaoc/core/dist/esm/deno/rust.ffi.mjs"],"sourcesContent":["import \"@bfsx/typings\";\nlet libSuffix = \"\";\nswitch (Deno.build.os) {\n  case \"windows\":\n    libSuffix = \"dll\";\n    break;\n  case \"darwin\":\n    libSuffix = \"dylib\";\n    break;\n  default:\n    libSuffix = \"so\";\n    break;\n}\nconst libName = `librust_lib.${libSuffix}`;\nconst dylib = Deno.dlopen(libName, {\n  js_to_rust_buffer: { parameters: [\"pointer\", \"usize\"], result: \"void\" },\n  rust_to_js_buffer: {\n    parameters: [\"pointer\"],\n    result: \"pointer\"\n  },\n  eval_js: { parameters: [\"pointer\", \"usize\"], result: \"void\" }\n});\nconst Rust = dylib.symbols;\nconst buffer = new TextEncoder().encode(\"Hello coming from Deno space\");\nconst ret = dylib.symbols.rust_to_js_buffer(buffer);\nconsole.log(\"dylib.symbols.rust_to_js_buffer(buffer):\", ret);\nexport { Rust as default };\n//# sourceMappingURL=rust.ffi.mjs.map\n"],"names":[],"mappings":"AACA,IAAI,YAAY;AAChB,QAAQ,KAAK,MAAM;AAAA,OACZ;AACH,gBAAY;AACZ;AAAA,OACG;AACH,gBAAY;AACZ;AAAA;AAEA,gBAAY;AACZ;AAAA;AAEJ,MAAM,UAAU,eAAe;AAC/B,MAAM,QAAQ,KAAK,OAAO,SAAS;AAAA,EACjC,mBAAmB,EAAE,YAAY,CAAC,WAAW,OAAO,GAAG,QAAQ,OAAQ;AAAA,EACvE,mBAAmB;AAAA,IACjB,YAAY,CAAC,SAAS;AAAA,IACtB,QAAQ;AAAA,EACT;AAAA,EACD,SAAS,EAAE,YAAY,CAAC,WAAW,OAAO,GAAG,QAAQ,OAAQ;AAC/D,CAAC;AACI,MAAC,OAAO,MAAM;AACnB,MAAM,SAAS,IAAI,YAAW,EAAG,OAAO,8BAA8B;AACtE,MAAM,MAAM,MAAM,QAAQ,kBAAkB,MAAM;AAClD,QAAQ,IAAI,4CAA4C,GAAG;;"}