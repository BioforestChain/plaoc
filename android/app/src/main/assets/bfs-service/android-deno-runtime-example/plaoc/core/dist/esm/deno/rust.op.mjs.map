{"version":3,"file":"rust.op.mjs","sources":["../../../../../../../../../../../android-deno-runtime-example/plaoc/core/dist/esm/deno/rust.op.mjs"],"sourcesContent":["import \"@bfsx/typings\";\nfunction js_to_rust_buffer(data) {\n  Deno.core.opSync(\"op_js_to_rust_buffer\", data);\n}\nfunction eval_js(data) {\n  Deno.core.opSync(\"op_eval_js\", data);\n}\nfunction loopRustBuffer() {\n  return {\n    async next() {\n      let buffer = [];\n      try {\n        buffer = await Deno.core.opAsync(\"op_rust_to_js_buffer\");\n        console.log(\"rust\\u53D1\\u9001\\u6D88\\u606F\\u7ED9deno_js:\", buffer);\n        if (buffer[0] === 0) {\n          buffer.splice(0, 3);\n        }\n        const string = new TextDecoder().decode(new Uint8Array(buffer));\n        console.log(\"rust\\u53D1\\u9001\\u6D88\\u606F\\u7ED9deno_js:\", string);\n        return {\n          value: string,\n          done: false\n        };\n      } catch (e) {\n        return {\n          value: \"\",\n          done: true\n        };\n      }\n    },\n    return() {\n    },\n    throw() {\n    }\n  };\n}\nexport { eval_js, js_to_rust_buffer, loopRustBuffer };\n//# sourceMappingURL=rust.op.mjs.map\n"],"names":[],"mappings":"AACA,2BAA2B,MAAM;AAC/B,OAAK,KAAK,OAAO,wBAAwB,IAAI;AAC/C;AACA,iBAAiB,MAAM;AACrB,OAAK,KAAK,OAAO,cAAc,IAAI;AACrC;AACA,0BAA0B;AACxB,SAAO;AAAA,IACL,MAAM,OAAO;AACX,UAAI,SAAS,CAAA;AACb,UAAI;AACF,iBAAS,MAAM,KAAK,KAAK,QAAQ,sBAAsB;AACvD,gBAAQ,IAAI,8CAA8C,MAAM;AAChE,YAAI,OAAO,OAAO,GAAG;AACnB,iBAAO,OAAO,GAAG,CAAC;AAAA,QACnB;AACD,cAAM,SAAS,IAAI,YAAa,EAAC,OAAO,IAAI,WAAW,MAAM,CAAC;AAC9D,gBAAQ,IAAI,8CAA8C,MAAM;AAChE,eAAO;AAAA,UACL,OAAO;AAAA,UACP,MAAM;AAAA,QAChB;AAAA,MACO,SAAQ,GAAP;AACA,eAAO;AAAA,UACL,OAAO;AAAA,UACP,MAAM;AAAA,QAChB;AAAA,MACO;AAAA,IACF;AAAA,IACD,SAAS;AAAA,IACR;AAAA,IACD,QAAQ;AAAA,IACP;AAAA,EACL;AACA;;"}